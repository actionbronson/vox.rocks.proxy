# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VoxAlbum(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, id: str=None, release_year: int=None, tracks_count: int=None, format: str=None, ts_added: int=None, ts_modified: int=None):  # noqa: E501
        """VoxAlbum - a model defined in Swagger

        :param name: The name of this VoxAlbum.  # noqa: E501
        :type name: str
        :param id: The id of this VoxAlbum.  # noqa: E501
        :type id: str
        :param release_year: The release_year of this VoxAlbum.  # noqa: E501
        :type release_year: int
        :param tracks_count: The tracks_count of this VoxAlbum.  # noqa: E501
        :type tracks_count: int
        :param format: The format of this VoxAlbum.  # noqa: E501
        :type format: str
        :param ts_added: The ts_added of this VoxAlbum.  # noqa: E501
        :type ts_added: int
        :param ts_modified: The ts_modified of this VoxAlbum.  # noqa: E501
        :type ts_modified: int
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'release_year': int,
            'tracks_count': int,
            'format': str,
            'ts_added': int,
            'ts_modified': int
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'release_year': 'release_year',
            'tracks_count': 'tracks_count',
            'format': 'format',
            'ts_added': 'ts_added',
            'ts_modified': 'ts_modified'
        }
        self._name = name
        self._id = id
        self._release_year = release_year
        self._tracks_count = tracks_count
        self._format = format
        self._ts_added = ts_added
        self._ts_modified = ts_modified

    @classmethod
    def from_dict(cls, dikt) -> 'VoxAlbum':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VoxAlbum of this VoxAlbum.  # noqa: E501
        :rtype: VoxAlbum
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this VoxAlbum.


        :return: The name of this VoxAlbum.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VoxAlbum.


        :param name: The name of this VoxAlbum.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this VoxAlbum.


        :return: The id of this VoxAlbum.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VoxAlbum.


        :param id: The id of this VoxAlbum.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def release_year(self) -> int:
        """Gets the release_year of this VoxAlbum.


        :return: The release_year of this VoxAlbum.
        :rtype: int
        """
        return self._release_year

    @release_year.setter
    def release_year(self, release_year: int):
        """Sets the release_year of this VoxAlbum.


        :param release_year: The release_year of this VoxAlbum.
        :type release_year: int
        """

        self._release_year = release_year

    @property
    def tracks_count(self) -> int:
        """Gets the tracks_count of this VoxAlbum.


        :return: The tracks_count of this VoxAlbum.
        :rtype: int
        """
        return self._tracks_count

    @tracks_count.setter
    def tracks_count(self, tracks_count: int):
        """Sets the tracks_count of this VoxAlbum.


        :param tracks_count: The tracks_count of this VoxAlbum.
        :type tracks_count: int
        """

        self._tracks_count = tracks_count

    @property
    def format(self) -> str:
        """Gets the format of this VoxAlbum.


        :return: The format of this VoxAlbum.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this VoxAlbum.


        :param format: The format of this VoxAlbum.
        :type format: str
        """

        self._format = format

    @property
    def ts_added(self) -> int:
        """Gets the ts_added of this VoxAlbum.


        :return: The ts_added of this VoxAlbum.
        :rtype: int
        """
        return self._ts_added

    @ts_added.setter
    def ts_added(self, ts_added: int):
        """Sets the ts_added of this VoxAlbum.


        :param ts_added: The ts_added of this VoxAlbum.
        :type ts_added: int
        """

        self._ts_added = ts_added

    @property
    def ts_modified(self) -> int:
        """Gets the ts_modified of this VoxAlbum.


        :return: The ts_modified of this VoxAlbum.
        :rtype: int
        """
        return self._ts_modified

    @ts_modified.setter
    def ts_modified(self, ts_modified: int):
        """Sets the ts_modified of this VoxAlbum.


        :param ts_modified: The ts_modified of this VoxAlbum.
        :type ts_modified: int
        """

        self._ts_modified = ts_modified
